diff -Naur ../void/freetag_apply.php ./freetag_apply.php
--- ../void/freetag_apply.php	1969-12-31 21:00:00.000000000 -0300
+++ ./freetag_apply.php	2006-04-26 12:33:35.000000000 -0300
@@ -0,0 +1,39 @@
+<?php 
+// $Header: /cvsroot/arca/estudiolivre/patch/tiki-1.10/_freetag-new_files.patch,v 1.4 2007-07-25 17:04:33 sampaioprimo Exp $
+
+// Copyright (c) 2002-2005, Luis Argerich, Garland Foster, Eduardo Polidor, et. al.
+// All Rights Reserved. See copyright.txt for details and a complete list of authors.
+// Licensed under the GNU LESSER GENERAL PUBLIC LICENSE. See license.txt for details.
+
+//this script may only be included - so its better to err & die if called directly.
+//smarty is not there - we need setup
+require_once('tiki-setup.php');  
+
+global $feature_freetags;
+global $tiki_p_freetags_tag;
+
+if ($feature_freetags == 'y' and $tiki_p_freetags_tag == 'y') {
+
+    global $freetaglib;
+    if (!is_object($freetaglib)) {
+	include_once('lib/freetag/freetaglib.php');
+    }
+
+    $tag_string = $_REQUEST['freetag_string'];
+    
+    // Use same parameters passed to categorize.php, makes simpler implementation
+    // and keep consistency
+    $old_tags = $freetaglib->get_tags_on_object($cat_objid, $cat_type);
+
+    global $user;
+
+    if (!isset($cat_desc)) $cat_desc = '';
+    if (!isset($cat_name)) $cat_name = '';
+    if (!isset($cat_href)) $cat_href = '';
+
+    $freetaglib->add_object($cat_type, $cat_objid, $cat_desc, $cat_name, $cat_href);	
+    $freetaglib->update_tags($user, $cat_objid, $cat_type, $tag_string);
+
+}
+
+?>
diff -Naur ../void/freetag_list.php ./freetag_list.php
--- ../void/freetag_list.php	1969-12-31 21:00:00.000000000 -0300
+++ ./freetag_list.php	2006-04-26 12:33:35.000000000 -0300
@@ -0,0 +1,43 @@
+<?php
+
+// $Header: /cvsroot/arca/estudiolivre/patch/tiki-1.10/_freetag-new_files.patch,v 1.4 2007-07-25 17:04:33 sampaioprimo Exp $
+
+// Copyright (c) 2002-2005, Luis Argerich, Garland Foster, Eduardo Polidor, et. al.
+// All Rights Reserved. See copyright.txt for details and a complete list of authors.
+// Licensed under the GNU LESSER GENERAL PUBLIC LICENSE. See license.txt for details.
+
+//this script may only be included - so its better to err & die if called directly.
+//smarty is not there - we need setup
+require_once('tiki-setup.php');  
+
+global $feature_freetags;
+global $tiki_p_view_freetags;
+
+if ($feature_freetags == 'y' and $tiki_p_view_freetags == 'y') {
+
+    global $freetaglib;
+    if (!is_object($freetaglib)) {
+	include_once('lib/freetag/freetaglib.php');
+    }
+
+    if (isset($cat_objid)) {
+
+	$tags = $freetaglib->get_tags_on_object($cat_objid, $cat_type);
+	
+	$taglist = '';
+	for ($i=0; $i<sizeof($tags['data']); $i++) {
+           if (!empty($taglist)) $taglist .= ', ';
+	    $taglist .= $tags['data'][$i]['tag'];
+	}
+
+	$smarty->assign('taglist',$taglist);
+    } else {
+	$taglist = '';
+    }
+
+    $suggestion = $freetaglib->get_tag_suggestion($taglist,10);
+
+    $smarty->assign('tag_suggestion',$suggestion);
+}
+
+?>
diff -Naur ../void/freetag.php ./freetag.php
--- ../void/freetag.php	1969-12-31 21:00:00.000000000 -0300
+++ ./freetag.php	2006-04-26 12:33:35.000000000 -0300
@@ -0,0 +1,37 @@
+<?php 
+// $Header: /cvsroot/arca/estudiolivre/patch/tiki-1.10/_freetag-new_files.patch,v 1.4 2007-07-25 17:04:33 sampaioprimo Exp $
+
+// Copyright (c) 2002-2005, Luis Argerich, Garland Foster, Eduardo Polidor, et. al.
+// All Rights Reserved. See copyright.txt for details and a complete list of authors.
+// Licensed under the GNU LESSER GENERAL PUBLIC LICENSE. See license.txt for details.
+
+//this script may only be included - so its better to err & die if called directly.
+//smarty is not there - we need setup
+require_once('tiki-setup.php');  
+$access->check_script($_SERVER["SCRIPT_NAME"],basename(__FILE__));
+
+global $feature_freetags;
+
+if ($feature_freetags == 'y') {
+
+    global $freetaglib;
+    if (!is_object($freetaglib)) {
+	include_once('lib/freetag/freetaglib.php');
+    }
+
+    if (isset($_REQUEST["freetag_save"]) && $_REQUEST["freetag_save"]) {
+
+	$tag_string = $_REQUEST['freetag_string'];
+	
+	global $user;
+	// Use same parameters passed to categorize.php, makes simpler implementation
+	// and keep consistency
+	$freetaglib->tag_object($user, $cat_objid, $cat_type, $tag_string);
+    }
+
+    $taglist = $freetaglib->get_tags_on_object($cat_objid, $cat_type);
+
+    $smarty->assign('taglist',$taglist);
+}
+
+?>
diff -Naur ../void/lib/freetag/freetag_ajax.js ./lib/freetag/freetag_ajax.js
--- ../void/lib/freetag/freetag_ajax.js	1969-12-31 21:00:00.000000000 -0300
+++ ./lib/freetag/freetag_ajax.js	2006-04-26 12:33:35.000000000 -0300
@@ -0,0 +1,74 @@
+
+//cp.set_persistent_connection('yes');
+
+var objectType = '';
+var currentTag = '';
+var selectedElement = false;
+
+function listObjects(tag) {
+    currentTag = tag;
+    var cp = new cpaint();
+    cp.set_response_type('XML');
+    //cp.set_debug(2);
+
+    document.getElementById('ajaxLoading').style.display = 'block';
+
+    cp.call('tiki-freetag_list_objects_ajax.php', 'list_objects', renderObjectList, tag, objectType);
+}
+
+function renderObjectList(result) {
+    var objects = result.getElementsByTagName('object');
+    
+    if (!objects.length) {
+	document.getElementById('objectList').innerHTML = '';
+	return;
+    }
+
+    var href = objects.item(0).getElementsByTagName('href');
+
+    var data = new Array();
+    for (var i=0; i<objects.length; i++) {
+	var obj = objects[i];
+	var item = new Array();
+	for (var j=0; j<obj.childNodes.length; j++) {
+	    item[obj.childNodes[j]['tagName']] = obj.childNodes[j]['textContent'];
+	}
+	data[i] = item;
+    }
+
+    var content = '';
+    for (var i=0; i<data.length; i++) {
+	var item = data[i];
+	content += '<div class="freetagObject' + (i%2 ? 'Odd' : 'Even') + '">';
+	content += '  <div class="freetagObjectName">';
+	content += '    <a href="'+item['href']+'">'+item['name']+'</a>';
+	content += '  </div>';
+	content += '  <div class="freetagObjectType">'+item['type']+'</div>';
+	content += '  <div class="freetagObjectDescription">'+item['description']+'</div>';
+	content += '</div>';
+    }
+
+    if (currentTag && document.getElementById('currentTag1')) {
+	document.getElementById('currentTag1').innerHTML = currentTag;
+    }
+    if (currentTag && document.getElementById('currentTag2')) {    
+	document.getElementById('currentTag2').innerHTML = currentTag;
+    }
+    document.getElementById('objectList').innerHTML = content;    
+
+    document.getElementById('ajaxLoading').style.display = 'none';
+}
+
+function setObjectType(type, button) {
+    objectType = type;
+    if (!selectedElement) 
+	selectedElement = document.getElementById('typeAll');
+    selectedElement.className = 'linkbut';
+    button = document.getElementById(button);
+    button.className= 'linkbut highlight';
+    selectedElement = button;
+    listObjects(currentTag);
+}
+
+
+
diff -Naur ../void/lib/freetag/freetaglib.php ./lib/freetag/freetaglib.php
--- ../void/lib/freetag/freetaglib.php	1969-12-31 21:00:00.000000000 -0300
+++ ./lib/freetag/freetaglib.php	2006-04-26 12:33:35.000000000 -0300
@@ -0,0 +1,924 @@
+<?php
+
+/**
+ * FreetagLib is based in Freetag library. Code was translated to Tiki style and
+ *
+ * API and docs was mostly preserved:
+ *
+ * - the "type" variable added wherever an object id is passed.
+ * - user is varchar instead of text
+ * - debug_text function removed
+ *
+ * Translated by Luis Fagundes aka batawata
+ */
+/**
+ *  Gordon Luk's Freetag - Generalized Open Source Tagging and Folksonomy.
+ *  Copyright (C) 2004-2005 Gordon D. Luk <gluk AT getluky DOT net>
+ *
+ *  Released under both BSD license and Lesser GPL library license.  Whenever
+ *  there is any discrepancy between the two licenses, the BSD license will
+ *  take precedence. See License.txt.  
+ *
+ */
+/**
+ *  Freetag API Implementation
+ *
+ *  Freetag is a generic PHP class that can hook-in to existing database
+ *  schemas and allows tagging of content within a social website. It's fun,
+ *  fast, and easy!  Try it today and see what all the folksonomy fuss is
+ *  about.
+ * 
+ *  Contributions and/or donations are welcome.
+ *
+ *  Author: Gordon Luk
+ *  http://www.getluky.net
+ *  
+ *  Version: 0.231
+ *  Last Updated: 10/13/2005 
+ * 
+ */ 
+
+//this script may only be included - so its better to die if called directly.
+if (strpos($_SERVER["SCRIPT_NAME"],basename(__FILE__)) !== false) {
+  header("location: index.php");
+  exit;
+}
+
+require_once("lib/objectlib.php");
+
+class FreetagLib extends ObjectLib {
+
+    // The fields below should be tiki preferences
+    
+    /* @access private
+     * @param string The regex-style set of characters that are valid for normalized tags.
+     */
+    var $_normalized_valid_chars = 'a-zA-Z0-9';
+    /**
+     * @access private
+     * @param string Whether to normalize tags at all.
+     */
+    var $_normalize_tags = 1;
+    /**
+     * @access private
+     * @param string Whether to prevent multiple users from tagging the same object. By default, set to block (ala Upcoming.org)
+     */
+    var $_block_multiuser_tag_on_object = 1;
+
+    /**
+     * @access private
+     * @param int The maximum length of a tag.
+     */ 
+    var $_MAX_TAG_LENGTH = 30;
+    /**
+     * @access private
+     * @param string The file path to the installation of ADOdb used.
+     */ 
+    var $_ADODB_DIR = 'adodb/';
+
+    /**
+     * @access public
+     * @param int The number of size degrees for tags in cloud. There should be correspondent classes in css.
+     */
+    var $max_cloud_text_size = 7;
+     
+    
+    /**
+     * FreetagLib
+     *
+     * Constructor for the freetag class. 
+     *
+     */ 
+    function FreetagLib($db) {
+	if (!$db) {
+	    die ("Invalid db object passed to FreetagLib constructor");
+	}
+	
+	$this->db = $db;
+    }
+
+    /**
+     * get_objects_with_tag
+     *
+     * Use this function to build a page of results that have been tagged with the same tag.
+     * Pass along a user to collect only a certain user's tagged objects, and pass along
+     * none in order to get back all user-tagged objects. Most of the get_*_tag* functions
+     * operate on the normalized form of tags, because most interfaces for navigating tags
+     * should use normal form.
+     *
+     * @param string - Pass the normalized tag form along to the function.
+     * @param int (Optional) - The numerical offset to begin display at. Defaults to 0.
+     * @param int (Optional) - The number of results per page to show. Defaults to 100.
+     * @param int (Optional) - The unique ID of the 'user' who tagged the object.
+     *
+     * @return An array of Object ID numbers that reference your original objects.
+     */ 
+    function get_objects_with_tag($tag, $type='', $user='', $offset = 0, $maxRecords = -1) {
+	if(!isset($tag)) {
+	    return false;
+	}		
+	
+	$bindvals = array($tag);
+	
+	$mid = '';
+
+	if(isset($user) && (!empty($user))) {
+	    $mid .= " AND `user` = ?";
+	    $bindvals[] = $user;
+	}
+
+	if (isset($type) && !empty($type)) {
+	    $mid .= " AND `type` = ?";
+	    $bindvals[] = $type;
+	}
+	
+	$query = "SELECT DISTINCT o.* ";
+	$query_cant = "SELECT COUNT(*) ";
+	
+	$query_end = "FROM `tiki_objects` o, `tiki_freetagged_objects` fto, `tiki_freetags` t WHERE fto.`tagId`=t.`tagId` AND o.`objectId` = fto.`objectId`
+			      AND `tag` = ?
+                              $mid
+			      ";
+	
+	$query      .= $query_end;
+	$query_cant .= $query_end;
+	
+	$result = $this->query($query, $bindvals, $maxRecords, $offset);
+	
+	$ret = array();
+	while ($row = $result->fetchRow()) {
+	    $ret[] = $row;
+	}
+	
+	$cant = $this->getOne($query_cant, $bindvals);
+	
+	return array('data' => $ret,
+		     'cant' => $cant);
+    }
+    
+    /**
+     * get_objects_with_tag_combo
+     *
+     * Returns an array of object ID's that have all the tags passed in the
+     * tagArray parameter. Use this to provide tag combo services to your users.
+     *
+     * @param string - Pass an array of normalized form tags along to the function.
+     * @param int (Optional) - The numerical offset to begin display at. Defaults to 0.
+     * @param int (Optional) - The number of results per page to show. Defaults to 100.
+     * @param int (Optional) - Restrict the result to objects tagged by a particular user.
+     *
+     * @return An array of Object ID numbers that reference your original objects.
+     */
+    
+    function get_objects_with_tag_combo($tagArray, $type = '', $user = '', $offset = 0, $maxRecords = -1, $sort_mode = false) {
+	if (!isset($tagArray) || !is_array($tagArray)) {
+	    return false;
+	}
+	
+	if (count($tagArray) == 0) {
+	    return array('data' => array(),
+			 'cant' => 0);
+	}
+	
+	$bindvals = $tagArray;
+
+   $mid = '';
+	
+	if (isset($user) && !empty($user)) {
+	    $mid = "AND `user` = ?";
+	    $bindvals[] = $user;
+	}
+
+	if (isset($type) && !empty($type)) {
+	    $mid .= " AND `type` = ?";
+	    $bindvals[] = $type;
+	}
+	
+	$tag_sql = "?";
+	$numTags = count($tagArray);
+	for ($i=1; $i<$numTags; $i++) { $tag_sql .= ",?"; }
+	
+	$bindvals[] = $numTags;
+	
+	// We must adjust for duplicate normalized tags appearing multiple times in the join by 
+	// counting only the distinct tags. It should also work for an individual user.
+	
+	$query = "SELECT o.*, t.`tag`, COUNT(DISTINCT t.`tag`) AS uniques
+			FROM `tiki_objects` o,
+                             `tiki_freetagged_objects` fto,
+			     `tiki_freetags` t
+			WHERE t.`tag` IN ($tag_sql) AND
+                              fto.`tagId` = t.`tagId` AND
+                              fto.`objectId` = o.`objectId`                              
+                        $mid
+			GROUP BY o.`objectId`
+			HAVING uniques = ?";
+
+     	if ($sort_mode) {
+           $query .= " order by ".$this->convert_sortmode($sort_mode);
+     	}	
+
+	$result = $this->query($query, $bindvals, $maxRecords, $offset);
+	
+	$ret = array();
+	$cant = 0;
+	while ($row = $result->fetchRow()) {
+	    $ret[] = $row;
+		$cant++;
+	}
+	
+	return array('data' => $ret,
+		     'cant' => $cant);
+    }
+    
+    
+    /**
+     * get_objects_with_tag_id
+     *
+     * Use this function to build a page of results that have been tagged with the same tag.
+     * This function acts the same as get_objects_with_tag, except that it accepts a numerical
+     * tag_id instead of a text tag.
+     * Pass along a user to collect only a certain user's tagged objects, and pass along
+     * none in order to get back all user-tagged objects.
+     *
+     * @param int - Pass the ID number of the tag.
+     * @param int (Optional) - The numerical offset to begin display at. Defaults to 0.
+     * @param int (Optional) - The number of results per page to show. Defaults to 100.
+     * @param int (Optional) - The unique ID of the 'user' who tagged the object.
+     *
+     * @return An array of Object ID numbers that reference your original objects.
+     */ 
+    function get_objects_with_tag_id($tagId, $user = '', $offset = 0, $maxRecords = -1) {
+	if(!isset($tagId)) {
+	    return false;
+	}		
+	
+	$bindvals = array($tagId);
+	
+	if(isset($user) && empty($user)) {
+	    $mid = "AND `user` = ?";
+	    $bindvals[] = $user;
+	} else {
+	    $mid = "";
+	}
+	
+	$query = "SELECT DISTINCT o.* ";
+	$query_cant = "SELECT COUNT(*) ";
+	
+	$query_end = "  
+			FROM `tiki_freetagged_objects` fto, `tiki_freetags` t, `tiki_objects` o
+			WHERE t.`tagId` = ? AND fto.`tagId`=t.`tagId` AND o.`objectId`=fto.`objectId`
+                        $mid
+			";
+
+	$query      .= $query_end;
+	$query_cant .= $query_end;
+
+	$result = $this->query($query, $bindvals, $maxRecords, $offset);
+
+	$ret = array();
+	while ($row = $result->fetchRow()) {
+	    $ret[] = $row;
+	}
+
+	$cant = $this->getOne($query_cant, $bindvals);
+
+	return array('data' => $ret,
+		     'cant' => $cant);
+    }
+
+
+    /**
+     * get_tags_on_object
+     *
+     * You can use this function to show the tags on an object. Since it supports both user-specific
+     * and general modes with the $user parameter, you can use it twice on a page to make it work
+     * similar to upcoming.org and flickr, where the page displays your own tags differently than
+     * other users' tags.
+     *
+     * @param int The unique ID of the object in question.
+     * @param int The offset of tags to return
+     * @param int The size of the tagset to return
+     * @param int The unique ID of the person who tagged the object, if user-level tags only are preferred.
+     *
+     * @return array Returns a PHP array with object elements ordered by object ID. Each element is an associative
+     * array with the following elements:
+     *   - 'tag' => Normalized-form tag
+     *	 - 'raw_tag' => The raw-form tag
+     *	 - 'user' => The unique ID of the person who tagged the object with this tag.
+     */ 
+    function get_tags_on_object($itemId, $type, $offset = 0, $maxRecords = -1, $user = NULL) {
+	if (!isset($itemId) || !isset($type) || empty($itemId) || empty($type)) {
+	    return false;
+	}
+
+	$bindvals = array($itemId, $type);
+
+	if (isset($user) && (!empty($user))) {
+	    $mid = "AND `user` = ?"; 
+	    $bindvals[] = $user;
+	} else {
+	    $mid = "";
+	}
+	    
+	$query = "SELECT DISTINCT t.`tagId`, `tag`, `raw_tag`, `user` ";
+	$query_cant = "SELECT COUNT(*) ";
+
+	$query_end = "
+			FROM `tiki_objects` o,
+                             `tiki_freetagged_objects` fto, 
+                             `tiki_freetags` t
+			WHERE t.`tagId` = fto.`tagId` AND
+                              fto.`objectId` = o.`objectId` AND 
+                              o.`itemId` = ? AND
+                              o.`type` = ?
+ 			      $mid
+			";
+
+	$query      .= $query_end;
+	$query_cant .= $query_end;
+	    
+	$result = $this->query($query, $bindvals, $maxRecords, $offset);
+	    
+	$ret = array();
+	while ($row = $result->fetchRow()) {
+	    $ret[] = $row;
+	}
+	    
+	$cant = $this->getOne($query_cant, $bindvals);
+	    
+	return array('data' => $ret,
+		     'cant' => $cant);
+    }
+
+    /**
+     * safe_tag
+     *
+     * Pass individual tag phrases along with object and person ID's in order to 
+     * set a tag on an object. If the tag in its raw form does not yet exist,
+     * this function will create it.
+     * Fails transparently on duplicates, and checks for dupes based on the 
+     * block_multiuser_tag_on_object constructor param.
+     *
+     * @param int The unique ID of the person who tagged the object with this tag.
+     * @param int The unique ID of the object in question.
+     * @param string A raw string from a web form containing tags.
+     *
+     * @return Returns true if successful, false otherwise. Does not operate as a transaction.
+     */ 
+
+    function safe_tag($user, $itemId, $type, $tag) {
+	if (!isset($user) || !isset($itemId) || !isset($type) || !isset($tag) ||
+	    empty($user) || empty($itemId) || empty($type) || empty($tag)) {
+	    die("safe_tag argument missing");
+	    return false;
+	}
+	    
+	    
+	$normalized_tag = $this->normalize_tag($tag);
+	$bindvals = array($itemId, $type, $normalized_tag);
+	 
+	$mid = '';
+
+	// First, check for duplicate of the normalized form of the tag on this object.
+	// Dynamically switch between allowing duplication between users on the
+	// constructor param 'block_multiuser_tag_on_object'.
+	if (!$this->_block_multiuser_tag_on_object) {
+	    $mid = " AND user = ?";
+	    $bindvals[] = $user;
+	}
+	    
+	$query = "SELECT COUNT(*)
+			FROM `tiki_objects` o,
+                             `tiki_freetagged_objects` fto,
+                             `tiki_freetags` t 
+			WHERE fto.`tagId` = t.`tagId`
+                        AND fto.`objectId` = o.`objectId`
+			AND o.`itemId` = ?
+                        AND o.`type` = ?
+			AND t.`tag` = ?
+			$mid
+			";
+	    
+	if($this->getOne($query, $bindvals) > 0) {
+	    return true;
+	}
+	    
+	// Then see if a raw tag in this form exists.
+	$query = "SELECT `tagId` 
+			FROM `tiki_freetags` 
+			WHERE `raw_tag` = ?
+			";
+	    
+	$result = $this->query($query, array($tag));
+	    
+	if ($row = $result->fetchRow()) {
+	    $tagId = $row['tagId'];
+	} else {
+	    // Add new tag! 
+	    $query = "INSERT INTO `tiki_freetags` (`tag`, `raw_tag`) VALUES (?,?)";
+	    $bindvals = array($normalized_tag, $tag);
+	    $this->query($query, $bindvals);
+		
+	    $query = "SELECT MAX(`tagId`) FROM `tiki_freetags` WHERE `tag`=? AND `raw_tag`=?";
+	    $tagId = $this->getOne($query, $bindvals);
+	}
+	    
+	if(!($tagId > 0)) {
+	    return false;
+	}
+
+	$objectId = $this->add_object($type, $itemId);
+
+	$query = "INSERT INTO `tiki_freetagged_objects`
+			(`tagId`, `objectId`, `user`, `created`)
+			VALUES (?,?,?,?)
+			";
+	$bindvals = array($tagId, $objectId, $user, time());
+	    
+	$this->query($query, $bindvals);
+	    
+	return true;
+    }
+
+    /**
+     * normalize_tag
+     *
+     * This is a utility function used to take a raw tag and convert it to normalized form.
+     * Normalized form is essentially lowercased alphanumeric characters only, 
+     * with no spaces or special characters.
+     *
+     * Customize the normalized valid chars with your own set of special characters
+     * in regex format within the option 'normalized_valid_chars'. It acts as a filter
+     * to let a customized set of characters through.
+     * 
+     * After the filter is applied, the function also lowercases the characters using strtolower 
+     * in the current locale.
+     *
+     * The default for normalized_valid_chars is a-zA-Z0-9, or english alphanumeric.
+     *
+     * @param string An individual tag in raw form that should be normalized.
+     *
+     * @return string Returns the tag in normalized form.
+     */ 
+    function normalize_tag($tag) {
+	if ($this->_normalize_tags) {
+	    $normalized_valid_chars = $this->_normalized_valid_chars;
+	    $normalized_tag = preg_replace("/[^$normalized_valid_chars]/", "", $tag);
+	    return strtolower($normalized_tag);
+	} else {
+	    return $tag;
+	}
+	    
+    }
+	
+    /**
+     * delete_object_tag
+     *
+     * Removes a tag from an object. This does not delete the tag itself from
+     * the database. Since most applications will only allow a user to delete
+     * their own tags, it supports raw-form tags as its tag parameter, because
+     * that's what is usually shown to a user for their own tags.
+     *
+     * @param int The unique ID of the person who tagged the object with this tag.
+     * @param int The ID of the object in question.
+     * @param string The raw string form of the tag to delete. See above for notes.
+     *
+     * @return string Returns the tag in normalized form.
+     */ 
+    function delete_object_tag($user, $itemId, $type, $tag) {
+	if (!isset($user) || !isset($itemId) || !isset($type) || !isset($tag) ||
+	    empty($user) || empty($itemId) || empty($type) || empty($tag)) {
+	    die("delete_object_tag argument missing");
+	    return false;
+	}
+
+	$tagId = $this->get_raw_tag_id($tag);
+
+	if ( !($tagId > 0)) {
+	    return false;
+	} else {
+
+	    $objectId = $this->get_object_id($type, $itemId);
+		
+	    $query = "DELETE FROM `tiki_freetagged_objects`
+			WHERE `user` = ?
+			AND `objectId` = ?
+			AND `tagId` = ?
+			LIMIT 1
+			";
+	    $bindvals = array($user, $objectId, $tagId);
+
+	    $this->query($query, $bindvals);
+		
+	    return true;
+
+	} 
+    }
+
+    /**
+     * delete_all_object_tags_for_user
+     *
+     * Removes all tag from an object for a particular user. This does not
+     * delete the tag itself from the database. This is most useful for
+     * implementations similar to del.icio.us, where a user is allowed to retag
+     * an object from a text box. That way, it becomes a two step operation of
+     * deleting all the tags, then retagging with whatever's left in the input.
+     *
+     * @param int The unique ID of the person who tagged the object with this tag.
+     * @param int The ID of the object in question.
+     *
+     * @return string Returns the tag in normalized form.
+     */ 
+    function delete_all_object_tags_for_user($user, $itemId, $type) {
+	if(!isset($user) || !isset($itemId) || !isset($type)
+	   || empty($user) || empty($itemId) || empty($type)) {
+	    die("delete_all_object_tags_for_user argument missing");
+	    return false;
+	}
+	    
+	    
+	if ( !($itemId > 0)) {
+	    return false;
+	} else {
+
+	    $objectId = $this->get_object_id($type, $itemId);
+
+	    $query = "DELETE FROM `tiki_freetagged_objects`
+				WHERE `user` = ?
+                                  AND `objectId` = ?
+				";
+
+	    $bindvals = array($$user, $objectId);
+		
+	    $this->query($query, $bindvals);
+		
+	    return true;
+	} 
+    }
+
+    /**
+     * get_tag_id
+     *
+     * Retrieves the unique ID number of a tag based upon its normal form. Actually,
+     * using this function is dangerous, because multiple tags can exist with the same
+     * normal form, so be careful, because this will only return one, assuming that
+     * if you're going by normal form, then the individual tags are interchangeable.
+     *
+     * @param string The normal form of the tag to fetch.
+     *
+     * @return string Returns the tag in normalized form.
+     */ 
+    function get_tag_id($tag) {
+	if(!isset($tag) || empty($tag)) {
+	    die("get_tag_id argument missing");
+	    return false;
+	}
+		
+	$query = "SELECT `tagId` FROM `tiki_freetags`
+			WHERE 
+			tag = ?
+			LIMIT 1
+			";
+
+	return $this->getOne($query, array($tag));
+    }
+
+    /**
+     * get_raw_tag_id
+     *
+     * Retrieves the unique ID number of a tag based upon its raw form. If a single
+     * unique record is needed, then use this function instead of get_tag_id, 
+     * because raw_tags are unique.
+     *
+     * @param string The raw string form of the tag to fetch.
+     *
+     * @return string Returns the tag in normalized form.
+     */ 
+
+    function get_raw_tag_id($tag) {
+	if(!isset($tag) || empty($tag)) {
+	    die("get_tag_id argument missing");
+	    return false;
+	}
+		
+	$query = "SELECT `tagId` FROM `tiki_freetags`
+			WHERE 
+			`raw_tag` = ?
+			";
+
+	return $this->getOne($query, array($tag));
+    }
+
+    /**
+     * tag_object
+     *
+     * This function allows you to pass in a string directly from a form, which is then
+     * parsed for quoted phrases and special characters, normalized and converted into tags.
+     * The tag phrases are then individually sent through the safe_tag() method for processing
+     * and the object referenced is set with that tag. 
+
+     * @param int The unique ID of the person who tagged the object with this tag.
+     * @param int The ID of the object in question.
+     * @param string The raw string form of the tag to delete. See above for notes.
+     *
+     * @return string Returns the tag in normalized form.
+     */
+    function tag_object($user, $itemId, $type, $tag_string) {
+	if($tag_string == '') {
+	    return true;
+	}
+	
+	// Perform tag parsing
+	$tagArray = $this->_parse_tag($tag_string);
+	
+	$this->_tag_object_array($user, $itemId, $type, $tagArray);
+	    
+	return true;
+    }
+
+    function update_tags($user, $itemId, $type, $tag_string) {
+	// Perform tag parsing
+	$tagArray = $this->_parse_tag($tag_string);
+ 	
+	$oldTags = $this->get_tags_on_object($itemId, $type, 0, -1, $user);
+
+	foreach ($oldTags['data'] as $tag) {
+	    if (!in_array($tag['raw_tag'], $tagArray)) {
+		$this->delete_object_tag($user, $itemId, $type, $tag['raw_tag']);
+	    }
+	}
+
+	$this->_tag_object_array($user, $itemId, $type, $tagArray);
+	    
+	return true;
+    }
+
+    function _parse_tag($tag_string) {
+	if(get_magic_quotes_gpc()) {
+	    $query = stripslashes(trim($tag_string));
+	} else {
+	    $query = trim($tag_string);
+	}
+	$words = preg_split('/(")/', $query,-1,PREG_SPLIT_NO_EMPTY|PREG_SPLIT_DELIM_CAPTURE);
+	$delim = 0;
+	$newwords = array();
+	foreach ($words as $key => $word)
+	    {
+		if ($word == '"') {
+		    $delim++;
+		    continue;
+		}
+		if (($delim % 2 == 1) && $words[$key - 1] == '"') {
+		    $newwords[] = $word;
+		} else {
+		    $newwords = array_merge($newwords, preg_split('/\s+/', $word, -1, PREG_SPLIT_NO_EMPTY));
+		}
+	    }
+
+	return $newwords;
+    }
+    
+    function _tag_object_array($user, $itemId, $type, $tagArray) {
+
+	foreach($tagArray as $tag) {
+	    $tag = trim($tag);
+	    if(($tag != '') && (strlen($tag) <= $this->_MAX_TAG_LENGTH)) {
+		if(get_magic_quotes_gpc()) {
+		    $tag = addslashes($tag);
+		}
+		$this->safe_tag($user, $itemId, $type, $tag);
+	    }
+	}
+    }
+
+    /**
+     * get_most_popular_tags
+     *
+     * This function returns the most popular tags in the freetag system, with
+     * offset and limit support for pagination. It also supports restricting to 
+     * an individual user. Call it with no parameters for a list of 25 most popular
+     * tags.
+     * 
+     * @param int The unique ID of the person to restrict results to.
+     * @param int The offset of the tag to start at.
+     * @param int The number of tags to return in the result set.
+     *
+     * @return array Returns a PHP array with tags ordered by popularity descending. 
+     * Each element is an associative array with the following elements:
+     *   - 'tag' => Normalized-form tag
+     *	 - 'count' => The number of objects tagged with this tag.
+     */
+
+    function get_most_popular_tags($user = '', $offset = 0, $maxRecords = 25) {
+
+	// get top tag popularity
+	$query = "SELECT COUNT(*) as count
+			FROM `tiki_freetagged_objects` o
+			GROUP BY tagId
+			ORDER BY count DESC
+			";
+
+	$top = $this->getOne($query);
+
+	$bindvals = array();
+
+	if (isset($user) && (!empty($user))) {
+	    $mid = "AND `user` = ?"; 
+	    $bindvals[] = $user;
+	} else {
+	    $mid = "";
+	}
+
+	$query = "SELECT `tag`, COUNT(*) as count
+			FROM `tiki_freetags` t,
+                             `tiki_freetagged_objects` o
+			WHERE t.`tagId` = o.`tagId`
+			$mid
+			GROUP BY tag
+			ORDER BY count DESC, tag ASC
+			";
+
+	$result = $this->query($query, $bindvals, $maxRecords, $offset);
+
+	$ret = array();
+	$tag = array();
+	$count = array();
+
+	while ($row = $result->fetchRow()) {
+	    $size[] = $row['size'] = ceil($this->max_cloud_text_size * $row['count'] / $top);
+	    $tag[] = $row['tag'];
+	    $count[] = $row['count'];
+
+	    $ret[] = $row;
+	}
+	
+	// this should get out of here, function should return in order of
+	// popularity
+	array_multisort($tag, SORT_ASC, $count, SORT_DESC, $ret);
+	    
+	return $ret;
+    }
+
+    /**
+     * get_tag_suggestion
+     *
+     * This function returns the a set of tags to suggest to user.
+     * While it will statistically retrieve most popular more often,
+     * it has a random factor for new patterns to emerge.
+     * 
+     * @param string A string containing all tags object has, to be avoided
+     * @param int The number of tags to return in the result set.
+     *
+     * @return array Returns a PHP array with tags ordered randomly
+     */
+
+    function get_tag_suggestion($exclude = '', $max = 10) {
+	$query = "select t.* from `tiki_freetags` t, `tiki_freetagged_objects` o where t.`tagId`=o.`tagId` order by rand()";
+	$result = $this->query($query);
+
+	$tags = array();
+	$index = array();
+	while (sizeof($tags) < $max && $row = $result->fetchRow()) {
+	    $tag = $row['tag'];
+	    if (!isset($index[$tag]) && !preg_match("/$tag/",$exclude)) {
+		$tags[] = $tag;
+		$index[$tag] = 1;
+	    }
+	}
+
+	return $tags;
+    }
+
+    /**
+     * count_tags
+     *
+     * Returns the total number of tag->object links in the system.
+     * It might be useful for pagination at times, but i'm not sure if I actually use
+     * this anywhere. Restrict to a person's tagging by using the $user parameter.
+     *
+     * @param int The unique ID of the person to restrict results to.
+     *
+     * @return int Returns the count 
+     */
+    function count_tags($user = '') {
+	    
+	$bindvals = array();
+
+	if (isset($user) && (!empty($user))) {
+	    $mid = "AND `user` = ?"; 
+	    $bindvals[] = $user;
+	} else {
+	    $mid = "";
+	}
+	    
+	$query = "SELECT COUNT(*)
+			FROM `tiki_freetags` t, 
+                             `tiki_freetagged_objects` o
+			WHERE o.`tagId` = t.`tagId`
+			$mid
+			";
+
+	return $this->getOne($query, $bindvals);
+
+    }
+
+    /**
+     * silly_list
+     *
+     * This is a function built explicitly to set up a page with most popular tags
+     * that contains an alphabetically sorted list of tags, which can then be sized
+     * or colored by popularity.
+     *
+     * Also known more popularly as Tag Clouds!
+     *
+     * Here's the example case: http://upcoming.org/tag/
+     *
+     * @param int The maximum number of tags to return.
+     *
+     * @return array Returns an array where the keys are normalized tags, and the
+     * values are numeric quantity of objects tagged with that tag.
+     */
+
+    function silly_list($max = 100) {
+		
+	$query = "SELECT `tag`, COUNT(`objectId`) AS quantity
+			FROM `tiki_freetags` t, 
+                             `tiki_freetagged_objects` o,
+			WHERE t.`tagId` = o.`tagId`
+			GROUP BY `tag`
+			ORDER BY quantity DESC
+			";
+
+	$result = $this->query($query, array(), $max, 0);
+	    
+	$ret = array();
+	while ($row = $result->fetchRow()) {
+	    $ret[] = $row;
+	}
+	    
+	return $ret;
+    }
+
+    /**
+     * similar_tags
+     *
+     * Finds tags that are "similar" or related to the given tag.
+     * It does this by looking at the other tags on objects tagged with the tag specified.
+     * Confusing? Think of it like e-commerce's "Other users who bought this also bought," 
+     * as that's exactly how this works.
+     *
+     * Returns an empty array if no tag is passed, or if no related tags are found.
+     * Hint: You can detect related tags returned with count($retarr > 0)
+     *
+     * It's important to note that the quantity passed back along with each tag
+     * is a measure of the *strength of the relation* between the original tag
+     * and the related tag. It measures the number of objects tagged with both
+     * the original tag and its related tag.
+     *
+     * Thanks to Myles Grant for contributing this function!
+     *
+     * @param string The raw normalized form of the tag to fetch.
+     * @param int The maximum number of tags to return.
+     *
+     * @return array Returns an array where the keys are normalized tags, and the
+     * values are numeric quantity of objects tagged with BOTH tags, sorted by
+     * number of occurences of that tag (high to low).
+     */ 
+
+    function similar_tags($tag, $max = 100) {
+
+	if(!isset($tag) || empty($tag)) {
+	    return array();
+	}
+	    
+	// This query was written using a double join for PHP. If you're trying to eke
+	// additional performance and are running MySQL 4.X, you might want to try a 
+	// subselect and compare perf numbers.
+	    
+	$query = "SELECT t1.`tag`, COUNT( o1.`objectId` ) AS quantity
+			FROM `tiki_freetagged_objects` o1
+			INNER JOIN `tiki_freetags` t1 ON ( t1.`tagId` = o1.`tagId` )
+			INNER JOIN `tiki_freetagged_objects` o2 ON ( o1.`objectId` = o2.`objectId` )
+			INNER JOIN `tiki_freetags` t2 ON ( t2.`tagId` = o2.`tagId` )
+			WHERE t2.`tag` = ? AND t1.`tag` <> ?
+			GROUP BY o1.`tagId`
+			ORDER BY quantity DESC
+			";
+	    
+	$bindvals = array($tag, $tag);
+	    
+	$result = $this->query($query, $bindvals, $max, 0);
+	    
+	$ret = array();
+	while ($row = $result->fetchRow()) {
+	    $ret[] = $row;
+	}
+	    
+	return $ret;
+    }
+
+}
+
+global $dbTiki;
+$freetaglib = new FreetagLib($dbTiki);
diff -Naur ../void/lib/objectlib.php ./lib/objectlib.php
--- ../void/lib/objectlib.php	1969-12-31 21:00:00.000000000 -0300
+++ ./lib/objectlib.php	2006-04-26 12:33:35.000000000 -0300
@@ -0,0 +1,128 @@
+<?php
+// CVS: $Id: _freetag-new_files.patch,v 1.4 2007-07-25 17:04:33 sampaioprimo Exp $
+//this script may only be included - so its better to die if called directly.
+if (strpos($_SERVER["SCRIPT_NAME"],basename(__FILE__)) !== false) {
+  header("location: index.php");
+  exit;
+}
+
+// this is an abstract class
+class ObjectLib extends TikiLib {
+	function ObjectLib($db) {
+		$this->db = $db;
+	}
+
+    function add_object($type, $itemId, $description = '', $name = '', $href = '') {
+	$description = strip_tags($description);
+	$name = strip_tags($name);
+	$now = date("U");
+
+	$query = "select `objectId` from `tiki_objects` where `type`=? and `itemId`=?";
+	$objectId = $this->getOne($query, array($type, $itemId));
+
+	if ($objectId) {
+	    if (!empty($description) || !empty($name) || !empty($href)) {
+		$query = "update `tiki_objects` set `description`=?,`name`=?,`href`=? where `objectId`=?";
+		$this->query($query,array($description,$name,$href,$objectId));
+	    }
+	    return $objectId;
+	} else {
+	
+	    $query = "insert into `tiki_objects`(`type`,`itemId`,`description`,`name`,`href`,`created`,`hits`)
+    values(?,?,?,?,?,?,?)";
+	    $result = $this->query($query,array($type,(string) $itemId,$description,$name,$href,(int) $now,0));
+	    $query = "select `objectId` from `tiki_objects` where `created`=? and `type`=? and `itemId`=?";
+	    $objectId = $this->getOne($query,array((int) $now,$type,(string) $itemId));
+	    return $objectId;
+	}
+    }
+
+    function get_object_id($type, $itemId) {
+	$query = "select `objectId` from `tiki_objects` where `type`=? and `itemId`=?";
+	return $this->getOne($query, array($type, $itemId));
+    }
+
+	function get_needed_perm($objectType, $action) {
+		switch ($objectType) {
+		case 'wiki page': case 'wiki':
+			switch ($action) {
+			case 'view': case 'read': return 'tiki_p_view';
+			case 'edit': return 'tiki_p_edit';
+			}
+		case 'article':
+			switch ($action) {
+			case 'view': case 'read': return 'tiki_p_read_article';
+			case 'edit': return 'tiki_p_edit_article';
+			}
+		case 'post':
+			switch ($action) {
+			case 'view': case 'read': return 'tiki_p_read_blog';
+			case 'edit': return 'tiki_p_create_blog';
+			}
+		case 'blog':
+			switch ($action) {
+			case 'view': case 'read': return 'tiki_p_read_blog';
+			case 'edit': return 'tiki_p_create_blog';
+			}
+		case 'faq':
+			switch ($action) {
+			case 'view': case 'read': return 'tiki_p_view_faqs';
+			case 'edit': return 'tiki_p_admin_faqs';
+			}
+		case 'file gallery':
+			switch ($action) {
+			case 'view': case 'read': return 'tiki_p_view_file_gallery';
+			case 'edit': return 'tiki-admin_file_galleries';
+			}
+		case 'image gallery':
+			switch ($action) {
+			case 'view': case 'read': return 'tiki_p_view_image_gallery';
+			case 'edit': return 'tiki_p_admin_galleries';
+			}
+		case 'poll':
+			switch ($action) {
+			case 'view': case 'read': return 'tiki_p_vote_poll';
+			case 'edit': return 'tiki_p_admin';
+			}
+		case  'comment': case 'comments':
+			switch ($action) {
+			case 'view': case 'read': return 'tiki_p_read_comments';
+			case 'edit': return 'tiki_p_edit_comments';
+			}
+		default : return '';
+		}	
+	}
+	function get_info($objectType, $object) {
+		switch ($objectType) {
+			case 'wiki': case 'wiki page':
+				global $tikilib; include_once('lib/tikilib.php');
+				$info = $tikilib->get_page_info($object);
+				return (array('title'=>$object, 'data'=>$info['data'], 'is_html'=>$info['is_html']));
+			case 'article':
+				global $tikilib; include_once('lib/tikilib.php');
+				$info = $artlib->$tikilib->get_article($object);
+				return (array('title'=>$info['title'], 'data'=>$info['body']));
+		}
+		return (array('error'=>'true'));
+	}
+	function set_data($objectType, $object, $data) {
+		switch ($objectType) {
+			case 'wiki': case 'wiki page':
+				global $tikilib; include_once('lib/tikilib.php');
+				global $user;
+				$tikilib->update_page($object, $data, tra('section edit'), $user, $_SERVER["REMOTE_ADDR"]);
+				break;
+			case 'article':
+				global $artlib; include_once('lib/articles/artlib.php');
+				$artlib->replace_article();
+				break;
+		}
+	}
+	function delete_object($type, $itemId) {
+		$query = 'delete from `tiki_objects` where `itemId`=?  and `type`=?';
+		$this->query($query, array($itemId, $type));
+	}
+}
+global $dbTiki;
+$objectlib = new ObjectLib($dbTiki);
+?>
\ No newline at end of file
diff -Naur ../void/modules/mod-freetags_most_popular.php ./modules/mod-freetags_most_popular.php
--- ../void/modules/mod-freetags_most_popular.php	1969-12-31 21:00:00.000000000 -0300
+++ ./modules/mod-freetags_most_popular.php	2006-04-26 12:33:35.000000000 -0300
@@ -0,0 +1,15 @@
+<?php
+
+//this script may only be included - so its better to die if called directly.
+if (strpos($_SERVER["SCRIPT_NAME"],basename(__FILE__)) !== false) {
+  header("location: index.php");
+  exit;
+}
+
+require_once("lib/freetag/freetaglib.php");
+
+$most_popular_tags = $freetaglib->get_most_popular_tags('', 0, $module_rows);
+
+$smarty->assign('most_popular_tags', $most_popular_tags);
+
+?>
diff -Naur ../void/modules/mod-freetags_prefered.php ./modules/mod-freetags_prefered.php
--- ../void/modules/mod-freetags_prefered.php	1969-12-31 21:00:00.000000000 -0300
+++ ./modules/mod-freetags_prefered.php	2006-04-26 12:33:35.000000000 -0300
@@ -0,0 +1,17 @@
+<?php
+
+//this script may only be included - so its better to die if called directly.
+if (strpos($_SERVER["SCRIPT_NAME"],basename(__FILE__)) !== false) {
+  header("location: index.php");
+  exit;
+}
+
+if ($user) {
+    require_once("lib/freetag/freetaglib.php");
+    
+    $most_popular_tags = $freetaglib->get_most_popular_tags($user, 0, $module_rows);
+    
+    $smarty->assign('most_popular_tags', $most_popular_tags);
+}
+
+?>
diff -Naur ../void/templates/freetag.tpl ./templates/freetag.tpl
--- ../void/templates/freetag.tpl	1969-12-31 21:00:00.000000000 -0300
+++ ./templates/freetag.tpl	2006-04-26 12:33:35.000000000 -0300
@@ -0,0 +1,28 @@
+{if $feature_freetags eq 'y'}
+
+<script language="JavaScript">
+{literal}
+  function addTag(tag) {
+    el = document.getElementById('tagBox');
+    el.value += ' ' + tag;
+  }
+{/literal}
+</script>
+<tr class="formcolor">
+ <td>{tr}Folksonomy Tags{/tr}</td>
+ <td{if $cols} colspan="{$cols}"{/if}>
+  <div id="freetager">
+{if $feature_help eq 'y'}
+	<div class="simplebox">{tr}Put tags separated by spaces. For tags with more than one word, use no spaces and put words together.{/tr}</div>
+{/if}
+
+    <input type="text" id="tagBox" name="freetag_string" value="{$taglist|escape}" size="60" /><br />
+{foreach from=$tag_suggestion item=t}
+  <a href="javascript:addTag('{$t}')">{$t}</a> 
+{/foreach}
+
+  </div>
+  </td>
+</tr>
+
+{/if}{* $feature_freetags eq 'y' *}
diff -Naur ../void/templates/modules/mod-freetags_most_popular.tpl ./templates/modules/mod-freetags_most_popular.tpl
--- ../void/templates/modules/mod-freetags_most_popular.tpl	1969-12-31 21:00:00.000000000 -0300
+++ ./templates/modules/mod-freetags_most_popular.tpl	2006-04-26 12:33:35.000000000 -0300
@@ -0,0 +1,5 @@
+{tikimodule title="{tr}Most popular tags{/tr}" name="admin_menu" flip=$module_params.flip decorations=$module_params.decorations}
+{foreach from=$most_popular_tags item=tag}
+<a class="freetag_{$tag.size}" href="tiki-freetag_list_objects.php?tag={$tag.tag}">{$tag.tag}</a> 
+{/foreach}
+{/tikimodule}
diff -Naur ../void/templates/modules/mod-freetags_prefered.tpl ./templates/modules/mod-freetags_prefered.tpl
--- ../void/templates/modules/mod-freetags_prefered.tpl	1969-12-31 21:00:00.000000000 -0300
+++ ./templates/modules/mod-freetags_prefered.tpl	2006-04-26 12:33:35.000000000 -0300
@@ -0,0 +1,7 @@
+{if $user}
+  {tikimodule title="{tr}My prefered tags{/tr}" name="admin_menu" flip=$module_params.flip decorations=$module_params.decorations}
+  {foreach from=$most_popular_tags item=tag}
+  <a class="freetag_{$tag.size}" href="tiki-freetag_list_objects.php?tag={$tag.tag}">{$tag.tag}</a> 
+  {/foreach}
+  {/tikimodule}
+{/if}
diff -Naur ../void/templates/tiki-browse_freetags.tpl ./templates/tiki-browse_freetags.tpl
--- ../void/templates/tiki-browse_freetags.tpl	1969-12-31 21:00:00.000000000 -0300
+++ ./templates/tiki-browse_freetags.tpl	2006-04-26 12:33:35.000000000 -0300
@@ -0,0 +1,175 @@
+{* $Header: /cvsroot/arca/estudiolivre/patch/tiki-1.10/_freetag-new_files.patch,v 1.4 2007-07-25 17:04:33 sampaioprimo Exp $ *}
+
+{if $feature_ajax eq 'y'}
+<script src="lib/cpaint/cpaint2.inc.compressed.js" type="text/javascript"></script>
+<script src="lib/freetag/freetag_ajax.js" type="text/javascript"></script>
+{/if}
+
+{if $feature_morcego eq 'y' and $freetags_feature_3d eq 'y'}
+<h1>{tr}Browse related tags{/tr}</h1>
+
+<div class="morcego_embedded">
+<h2>{tr}Network of Tags related to{/tr}: <span id="currentTag1">{$tag}</span></h2>
+<applet codebase="./lib/wiki3d" archive="morcego-0.4.0.jar" code="br.arca.morcego.Morcego" width="{$freetags_3d_width}" height="{$freetags_3d_height}">
+      <param name="serverUrl" value="{$base_url}/tiki-freetag3d_xmlrpc.php">
+      <param name="startNode" value="{$tag}">
+      <param name="windowWidth" value="{$freetags_3d_width}">
+      <param name="windowHeight" value="{$freetags_3d_height}">
+      <param name="viewWidth" value="{$freetags_3d_width}">
+      <param name="viewHeight" value="{$freetags_3d_height}">
+      <param name="navigationDepth" value="{$freetags_3d_navigation_depth}">
+      <param name="feedAnimationInterval" value="{$freetags_3d_feed_animation_interval}">
+      <param name="controlWindowName" value="tiki">
+      
+      <param name="showArcaLogo" value="false">
+      <param name="showMorcegoLogo" value="false">
+
+      <param name="loadPageOnCenter" value="{$freetags_3d_autoload|default:"true"}">
+      
+      <param name="cameraDistance" value="{$freetags_3d_camera_distance|default:"200"}">
+      <param name="adjustCameraPosition" value="{$freetags_3d_adjust_camera|default:"true"}">
+
+      <param name="fieldOfView" value="{$freetags_3d_fov|default:"250"}">
+      <param name="nodeSize" value="{$freetags_3d_node_size|default:"30"}">
+      <param name="textSize" value="{$freetags_3d_text_size|default:"40"}">
+
+      <param name="frictionConstant" value="{$freetags_3d_friction_constant|default:"0.4f"}">
+      <param name="elasticConstant" value="{$freetags_3d_elastic_constant|default:"0.5f"}">
+      <param name="eletrostaticConstant" value="{$freetags_3d_eletrostatic_constant|default:"1000f"}">
+      <param name="springSize" value="{$freetags_3d_spring_size|default:"100"}">
+      <param name="nodeMass" value="{$freetags_3d_node_mass|default:"5"}">
+      <param name="nodeCharge" value="{$freetags_3d_node_charde|default:"1"}">
+
+</applet>
+</div>
+{/if}
+
+<h2>Objects tagged <span id="currentTag2">{$tag}</span></h2>
+
+{if $feature_ajax eq 'y'}
+<div class="navbar">
+<a class="linkbut {if $type eq ''} highlight{/if}"  href="javascript:setObjectType('','typeAll');" id="typeAll">{tr}All{/tr}</a>
+{if $feature_wiki eq 'y'}
+<a class="linkbut {if $type eq "wiki page"} highlight{/if}"  href="javascript:setObjectType('wiki page','typeWikiPage');" id="typeWikiPage">{tr}Wiki pages{/tr}</a>
+{/if}
+{if $feature_galleries eq 'y'}
+<a class="linkbut {if $type eq 'image gallery'} highlight{/if}"  href="javascript:setObjectType('image gallery','typeImageGalleries');" id="typeImageGalleries">{tr}Image galleries{/tr}</a>
+{/if}
+{if $feature_galleries eq 'y'}
+<a class="linkbut {if $type eq "image"} highlight{/if}"  href="javascript:setObjectType('image','typeImage');" id="typeImage">{tr}Images{/tr}</a>
+{/if}
+{if $feature_file_galleries eq 'y'}
+<a class="linkbut {if $type eq "file gallery"} highlight{/if}"  href="javascript:setObjectType('file gallery','typeFileGallery');" id="typeFileGallery">{tr}File galleries{/tr}</a>
+{/if}
+{if $feature_blogs eq 'y'}
+<a class="linkbut {if $type eq "blog post"} highlight{/if}"  href="javascript:setObjectType('blog post','typeBlogPost');" id="typeBlogPost">{tr}Blogs{/tr}</a>
+{/if}
+{if $feature_trackers eq 'y'}
+<a class="linkbut {if $type eq "tracker"} highlight{/if}"  href="javascript:setObjectType('tracker','typeTracker');" id="typeTracker">{tr}Trackers{/tr}</a>
+{/if}<a class="linkbut {if $type eq "tracker item"} highlight{/if}"  href="javascript:setObjectType('tracker item','typeTrackerItem');" id="typeTrackerItem">{tr}Trackers Items{/tr}</a>
+{if $feature_quizzes eq 'y'}
+<a class="linkbut {if $type eq "quizz"} highlight{/if}"  href="javascript:setObjectType('quizz','typeQuiz');" id="typeQuiz">{tr}Quizzes{/tr}</a>
+{/if}
+{if $feature_polls eq 'y'}
+<a class="linkbut {if $type eq "poll"} highlight{/if}"  href="javascript:setObjectType('poll','typePoll');" id="typePoll">{tr}Polls{/tr}</a>
+{/if}
+{if $feature_surveys eq 'y'}
+<a class="linkbut {if $type eq "survey"} highlight{/if}"  href="javascript:setObjectType('survey','typeSurvey');" id="typeSurvey">{tr}Surveys{/tr}</a>
+{/if}
+{if $feature_directory eq 'y'}
+<a class="linkbut {if $type eq "directory"} highlight{/if}"  href="javascript:setObjectType('directory','typeDirectory');" id="typeDirectory">{tr}Directory{/tr}</a>
+{/if}
+{if $feature_faqs eq 'y'}
+<a class="linkbut {if $type eq "faq"} highlight{/if}"  href="javascript:setObjectType('faq','typeFaq');" id="typeFaq">{tr}FAQs{/tr}</a>
+{/if}
+{if $feature_sheet eq 'y'}
+<a class="linkbut {if $type eq "sheet"} highlight{/if}"  href="javascript:setObjectType('sheet','typeSheet');" id="typeSheet">{tr}Sheets{/tr}</a>
+{/if}
+{if $feature_articles eq 'y'}
+<a class="linkbut {if $type eq "article"} highlight{/if}"  href="javascript:setObjectType('article','typeArticle');" id="typeArticle">{tr}Articles{/tr}</a>
+{/if}
+</div>
+
+<div id="objectList"></div>
+<script language="JavaScript">listObjects('{$tag}');</script>
+
+{else}
+
+  <a class="linkbut" href="tiki-browse_freetags.php?tag={$tag}">{tr}All{/tr}</a>
+  {if $feature_wiki eq 'y'}
+  <a class="linkbut" href="tiki-browse_freetags.php?tag={$tag}&amp;type=wiki+page">{if $type eq 'wiki page'}<span class="highlight">{/if}{tr}Wiki pages{/tr}{if $type eq 'wiki page'}</span>{/if}</a>
+  {/if}
+  {if $feature_galleries eq 'y'}
+  <a class="linkbut" href="tiki-browse_freetags.php?tag={$tag}&amp;type=image+gallery">{if $type eq 'image gallery'}<span class="highlight">{/if}{tr}Image galleries{/tr}{if $type eq 'image gallery'}</span>{/if}</a>
+  {/if}
+  {if $feature_galleries eq 'y'}
+  <a class="linkbut" href="tiki-browse_freetags.php?tag={$tag}&amp;type=image">{if $type eq 'image'}<span class="highlight">{/if}{tr}Images{/tr}{if $type eq image}</span>{/if}</a>
+  {/if}
+  {if $feature_file_galleries eq 'y'}
+  <a class="linkbut" href="tiki-browse_freetags.php?tag={$tag}&amp;type=file+gallery">{if $type eq 'file gallery'}<span class="highlight">{/if}{tr}File galleries{/tr}{if $type eq 'file gallery'}</span>{/if}</a>
+  {/if}
+  {if $feature_blogs eq 'y'}
+  <a class="linkbut" href="tiki-browse_freetags.php?tag={$tag}&amp;type=blog+post">{if $type eq 'blog'}<span class="highlight">{/if}{tr}Blogs{/tr}{if $type eq 'blog'}</span>{/if}</a>
+  {/if}
+  {if $feature_trackers eq 'y'}
+  <a class="linkbut" href="tiki-browse_freetags.php?tag={$tag}&amp;type=tracker">{if $type eq 'tracker'}<span class="highlight">{/if}{tr}Trackers{/tr}{if $type eq 'tracker'}</span>{/if}</a>
+  {/if}<a class="linkbut" href="tiki-browse_freetags.php?tag={$tag}&amp;type=trackerItem">{if $type eq 'trackerItem'}<span class="highlight">{/if}{tr}Trackers Items{/tr}{if $type eq 'trackerItem'}</span>{/if}</a>
+  {if $feature_quizzes eq 'y'}
+  <a class="linkbut" href="tiki-browse_freetags.php?tag={$tag}&amp;type=quiz">{if $type eq 'quiz'}<span class="highlight">{/if}{tr}Quizzes{/tr}{if $type eq 'quiz'}</span>{/if}</a>
+  {/if}
+  {if $feature_polls eq 'y'}
+  <a class="linkbut" href="tiki-browse_freetags.php?tag={$tag}&amp;type=poll">{if $type eq 'poll'}<span class="highlight">{/if}{tr}Polls{/tr}{if $type eq 'poll'}</span>{/if}</a>
+  {/if}
+  {if $feature_surveys eq 'y'}
+  <a class="linkbut" href="tiki-browse_freetags.php?tag={$tag}&amp;type=survey">{if $type eq 'survey'}<span class="highlight">{/if}{tr}Surveys{/tr}{if $type eq 'survey'}</span>{/if}</a>
+  {/if}
+  {if $feature_directory eq 'y'}
+  <a class="linkbut" href="tiki-browse_freetags.php?tag={$tag}&amp;type=directory">{if $type eq 'directory'}<span class="highlight">{/if}{tr}Directory{/tr}{if $type eq 'directory'}</span>{/if}</a>
+  {/if}
+  {if $feature_faqs eq 'y'}
+  <a class="linkbut" href="tiki-browse_freetags.php?tag={$tag}&amp;type=faq">{if $type eq 'faq'}<span class="highlight">{/if}{tr}FAQs{/tr}{if $type eq 'faq'}</span>{/if}</a>
+  {/if}
+  {if $feature_sheet eq 'y'}
+  <a class="linkbut" href="tiki-browse_freetags.php?tag={$tag}&amp;type=sheet">{if $type eq 'sheet'}<span class="highlight">{/if}{tr}Sheets{/tr}{if $type eq 'sheet'}</span>{/if}</a>
+  {/if}
+  {if $feature_articles eq 'y'}
+  <a class="linkbut" href="tiki-browse_freetags.php?tag={$tag}&amp;type=article">{if $type eq 'article'}<span class="highlight">{/if}{tr}Articles{/tr}{if $type eq 'article'}</span>{/if}</a>
+  {/if}   
+ 
+  <h3>{$cantobjects} {tr}results found{/tr}</h3>
+  {if $cantobjects > 0}
+  <table class="normal">
+  {cycle values="odd,even" print=false}
+  {section name=ix loop=$objects}
+  <tr class="{cycle}" >
+  <td>{tr}{$objects[ix].type|replace:"wiki page":"Wiki"|replace:"article":"Article"|regex_replace:"/tracker [0-9]*/":"tracker item"}{/tr}</td>
+  <td><a href="{$objects[ix].href}" class="catname">{$objects[ix].name}</a></td>
+  <td>{$objects[ix].description}&nbsp;</td>
+  </tr>
+  {/section}
+  </table>
+  <br />   
+
+  <div align="center">
+    <div class="mini">
+      {if $prev_offset >= 0}
+        [<a class="prevnext" href="tiki-browse_freetags.php?find={$find}&amp;type={$type}&amp;offset={$prev_offset}">{tr}prev{/tr}</a>]&nbsp;
+      {/if}
+      {tr}Page{/tr}: {$actual_page}/{$cant_pages}
+      {if $next_offset >= 0}
+        &nbsp;[<a class="prevnext" href="tiki-browse_freetags.php?find={$find}&amp;type={$type}&amp;offset={$next_offset}">{tr}next{/tr}</a>]
+      {/if}
+      {if $direct_pagination eq 'y'}
+        <br />
+        {section loop=$cant_pages name=foo}
+          {assign var=selector_offset value=$smarty.section.foo.index|times:$maxRecords}
+          <a class="prevnext" href="tiki-browse_freetags.php?find={$find}&amp;type={$type}&amp;offset={$selector_offset}">
+            {$smarty.section.foo.index_next}
+          </a>&nbsp;
+        {/section}
+      {/if}
+   </div>
+  </div>
+  {/if}
+
+{/if $feature_ajax}
\ No newline at end of file
diff -Naur ../void/tiki-browse_freetags.php ./tiki-browse_freetags.php
--- ../void/tiki-browse_freetags.php	1969-12-31 21:00:00.000000000 -0300
+++ ./tiki-browse_freetags.php	2006-04-26 12:33:35.000000000 -0300
@@ -0,0 +1,110 @@
+<?php
+
+// $Header: /cvsroot/arca/estudiolivre/patch/tiki-1.10/_freetag-new_files.patch,v 1.4 2007-07-25 17:04:33 sampaioprimo Exp $
+
+// Copyright (c) 2002-2005, Luis Argerich, Garland Foster, Eduardo Polidor, et. al.
+// All Rights Reserved. See copyright.txt for details and a complete list of authors.
+// Licensed under the GNU LESSER GENERAL PUBLIC LICENSE. See license.txt for details.
+
+//
+// $Header: /cvsroot/arca/estudiolivre/patch/tiki-1.10/_freetag-new_files.patch,v 1.4 2007-07-25 17:04:33 sampaioprimo Exp $
+//
+
+// Initialization
+require_once ('tiki-setup.php');
+
+include_once ('lib/freetag/freetaglib.php');
+
+if ($feature_freetags != 'y') {
+	$smarty->assign('msg', tra("This feature is disabled").": feature_freetags");
+
+	$smarty->display("error.tpl");
+	die;
+}
+
+if ($tiki_p_view_freetags != 'y') {
+	$smarty->assign('msg', tra("You do not have permission to use this feature"));
+	$smarty->display("error.tpl");
+	die;
+}
+
+if (!isset($_REQUEST['tag'])) {
+	$tag = $freetaglib->get_tag_suggestion('', 1);
+	if ($tag) {
+		header("Location: tiki-browse_freetags.php?tag=$tag[0]");
+	} else {
+		$smarty->assign('msg', tra("Nothing tagged yet").'.');
+		$smarty->display("error.tpl");
+		die;
+	}
+}
+
+if (!isset($_REQUEST["sort_mode"])) {
+	$sort_mode = 'name_asc';
+} else {
+	$sort_mode = $_REQUEST["sort_mode"];
+}
+
+$smarty->assign_by_ref('sort_mode', $sort_mode);
+
+if (!isset($_REQUEST["offset"])) {
+	$offset = 0;
+} else {
+	$offset = $_REQUEST["offset"];
+}
+
+$smarty->assign_by_ref('offset', $offset);
+
+if (!isset($_REQUEST["type"])) {
+	$type = '';
+} else {
+	$type = $_REQUEST["type"];
+}
+
+$smarty->assign('type', $type);
+
+if (isset($_REQUEST["user_only"]) && $_REQUEST["user_only"] == 'on') {
+    $view_user = $user;
+    $smarty->assign('user_only', 'on');
+} else {
+    $view_user = '';
+    $smarty->assign('user_only', 'off');
+}
+
+$smarty->assign('tag', $_REQUEST['tag']);
+
+$objects = $freetaglib->get_objects_with_tag($_REQUEST['tag'], $type, $view_user, $offset, $maxRecords); //, $sort_mode, $find);
+
+$smarty->assign_by_ref('objects', $objects["data"]);
+$smarty->assign_by_ref('cantobjects', $objects["cant"]);
+
+$cant_pages = ceil($objects["cant"] / $maxRecords);
+$smarty->assign_by_ref('cant_pages', $cant_pages);
+$smarty->assign('actual_page', 1 + ($offset / $maxRecords));
+
+if ($objects["cant"] > ($offset + $maxRecords)) {
+	$smarty->assign('next_offset', $offset + $maxRecords);
+} else {
+	$smarty->assign('next_offset', -1);
+}
+
+// If offset is > 0 then prev_offset
+if ($offset > 0) {
+	$smarty->assign('prev_offset', $offset - $maxRecords);
+} else {
+	$smarty->assign('prev_offset', -1);
+}
+
+$base_url = 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];
+$base_url = preg_replace('/\/tiki-browse_freetags.php.+$/','',$base_url);
+$smarty->assign('base_url',$base_url);
+
+$section = 'freetags';
+include_once ('tiki-section_options.php');
+ask_ticket('browse-freetags');
+
+// Display the template
+$smarty->assign('mid', 'tiki-browse_freetags.tpl');
+$smarty->display("tiki.tpl");
+
+?>
diff -Naur ../void/tiki-freetag3d_xmlrpc.php ./tiki-freetag3d_xmlrpc.php
--- ../void/tiki-freetag3d_xmlrpc.php	1969-12-31 21:00:00.000000000 -0300
+++ ./tiki-freetag3d_xmlrpc.php	2006-04-26 12:33:35.000000000 -0300
@@ -0,0 +1,76 @@
+<?php 
+
+// $HEADER$
+
+include_once("lib/init/initlib.php");
+require_once('db/tiki-db.php');
+require_once('lib/tikilib.php');
+require_once('lib/userslib.php');
+require_once("XML/Server.php");
+require_once("lib/freetag/freetaglib.php");
+
+
+$map = array ("getSubGraph" => array( "function" => "getSubGraph" ) );
+
+$server = new XML_RPC_Server( $map );
+
+function getSubGraph($params) {
+    global $freetaglib, $dbTiki;
+
+    $nodeName = $params->getParam(0); $nodeName = $nodeName->scalarVal();
+    $depth = $params->getParam(1); $depth = $depth->scalarVal();
+
+    $nodes = array();
+
+    $passed = array($nodeName => true);
+    $queue = array($nodeName);
+    $i = 0;
+
+    $tikilib = new TikiLib($dbTiki);
+    $color = $tikilib->get_preference("freetags_3d_existing_page_color", '#0000FF');
+
+    while ($i <= $depth && sizeof($queue) > 0) {
+	$nextQueue = array();
+	foreach ($queue as $nodeName) {
+
+	    $similar = $freetaglib->similar_tags($nodeName,5);
+	    $neighbours = array();
+	    foreach ($similar as $tag) {
+		$neighbours[] = $tag['tag'];
+	    }
+	    
+	    $temp_max = sizeof($neighbours);
+	    for ($j = 0; $j < $temp_max; $j++) {
+		if (!isset($passed[$neighbours[$j]])) {
+		    $nextQueue[] = $neighbours[$j];
+		    $passed[$neighbours[$j]] = true;
+		}
+		$neighbours[$j] = new XML_RPC_Value($neighbours[$j]);
+	    }
+
+	    $node = array();
+
+	    $base_url = 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];
+	    $base_url = preg_replace('/\/tiki-freetag3d_xmlrpc.php.*$/','',$base_url);
+
+	    $actionUrl = "javascript:listObjects('$nodeName');";
+
+	    $node['neighbours'] = new XML_RPC_Value($neighbours, "array");
+	    if (!empty($color)) {
+		$node['color'] = new XML_RPC_Value($color, "string");
+	    }
+	    $node['actionUrl'] = new XML_RPC_Value($actionUrl, "string");
+
+	    $nodes[$nodeName] = new XML_RPC_Value($node, "struct");
+
+	}
+	$i++;
+	$queue = $nextQueue;
+    }
+
+    $response = array("graph" => new XML_RPC_Value($nodes, "struct"));
+    
+    return new XML_RPC_Response(new XML_RPC_Value($response, "struct"));
+}
+
+?>
diff -Naur ../void/tiki-freetag_list_objects_ajax.php ./tiki-freetag_list_objects_ajax.php
--- ../void/tiki-freetag_list_objects_ajax.php	1969-12-31 21:00:00.000000000 -0300
+++ ./tiki-freetag_list_objects_ajax.php	2006-04-26 12:33:35.000000000 -0300
@@ -0,0 +1,38 @@
+<?
+//this script may only be included - so its better to die if called directly.
+
+require_once("tiki-setup.php");
+
+if ($feature_freetags != 'y') {
+	$smarty->assign('msg', tra("This feature is disabled").": feature_freetags");
+
+	$smarty->display("error.tpl");
+	die;
+}
+
+require_once('lib/cpaint/cpaint2.inc.php');
+require_once ('lib/freetag/freetaglib.php');
+
+function list_objects($tag, $type) {
+    global $freetaglib, $cp;
+    $objects = $freetaglib->get_objects_with_tag($tag, $type);
+
+    for ($i=0; $i < sizeof($objects['data']); $i++) {
+	$obj = $objects['data'][$i];
+
+	$ajaxObj =& $cp->add_node('object');
+	$fields = array('type','description','name','href');
+	foreach ($fields as $f) {
+	    $r =& $ajaxObj->add_node($f);
+	    $r->set_id($f . '_' . $i);
+	    $r->set_data($obj[$f]);
+	}
+    }
+}
+
+$cp = new cpaint();
+$cp->register('list_objects');
+$cp->start();
+$cp->return_data();
+
+?>
\ No newline at end of file
